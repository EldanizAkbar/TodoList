[{"C:\\Users\\elden\\Desktop\\React projects\\todolist\\src\\index.js":"1","C:\\Users\\elden\\Desktop\\React projects\\todolist\\src\\App.js":"2","C:\\Users\\elden\\Desktop\\React projects\\todolist\\src\\components\\TodoList.js":"3","C:\\Users\\elden\\Desktop\\React projects\\todolist\\src\\components\\TodoForm.js":"4"},{"size":196,"mtime":1634638289095,"results":"5","hashOfConfig":"6"},{"size":210,"mtime":1634706887067,"results":"7","hashOfConfig":"6"},{"size":0,"mtime":1634638961661,"results":"8","hashOfConfig":"6"},{"size":3110,"mtime":1634707297094,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"12alv1t",{"filePath":"13","messages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},"C:\\Users\\elden\\Desktop\\React projects\\todolist\\src\\index.js",[],["21","22"],"C:\\Users\\elden\\Desktop\\React projects\\todolist\\src\\App.js",[],"C:\\Users\\elden\\Desktop\\React projects\\todolist\\src\\components\\TodoList.js",[],["23","24"],"C:\\Users\\elden\\Desktop\\React projects\\todolist\\src\\components\\TodoForm.js",["25"],"import React from 'react';\r\nimport \"../css/todoform.css\"\r\nimport { BsFillXCircleFill } from \"react-icons/bs\";\r\nclass TodoForm extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            newItem: \"\",\r\n            list: []\r\n        }\r\n    }\r\n\r\n    updateInput(key, value) {\r\n        this.setState({\r\n            [key]: value\r\n        })\r\n    }\r\n\r\n    addItem() {\r\n        if(this.state.newItem==\"\"){\r\n            alert(\"Input can't be empty\");\r\n        }\r\n        else{\r\n\r\n       \r\n        const newItem = {\r\n            id: 1 + Math.random(),\r\n            value: this.state.newItem.slice()\r\n\r\n        };\r\n        const list = [...this.state.list]\r\n\r\n        list.push(newItem);\r\n\r\n        this.setState({\r\n            list,\r\n            newItem: \"\"\r\n        })\r\n    }\r\n\r\n    }\r\n\r\n    deleteItem(id) {\r\n        const list = [...this.state.list];\r\n        const updatedList = list.filter(item => item.id !== id);\r\n        this.setState({ list: updatedList });\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div class=\"row mx-auto\">\r\n                    <div class='col-8 mx-auto'>\r\n                        <h1 className=\"mt-5\">What's the Plan for Today?</h1>\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"row mx-auto mt-3\">\r\n                    <div class='col-12 col-sm-8 col-lg-5 mx-auto'>\r\n\r\n                        <form className=\"d-flex justify-content-center\">\r\n                            <input\r\n                                class=\"int p-3 w-100\"\r\n                                type=\"text\"\r\n                                value={this.state.newItem}\r\n                                onChange={e => this.updateInput(\"newItem\", e.target.value)}\r\n                                placeholder=\"Add a todo\" />\r\n\r\n                            <button type=\"button\" class=\"btn px-3\" onClick={() => this.addItem()}>\r\n                                Add\r\n                            </button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"row mx-auto mt-3\">\r\n                    <div className=\"col-12 col-sm-8 col-lg-5 mx-auto\">\r\n                        <ul class=\"list-group\">\r\n                            {this.state.list.map(item => {\r\n                                return (\r\n                          \r\n                                    <li class=\"list-group-item mt-3 mb-2\" key={item.id} >\r\n                                        {item.value}\r\n                                        <BsFillXCircleFill\r\n                                    className=\"todo-item\"\r\n                                    onClick={() => this.deleteItem(item.id)}>\r\n                                 </BsFillXCircleFill>\r\n                                    </li>\r\n                                   \r\n\r\n                                )\r\n                            })}\r\n\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default TodoForm;",{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","replacedBy":"29"},{"ruleId":"26","replacedBy":"30"},{"ruleId":"28","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":22,"column":30,"nodeType":"34","messageId":"35","endLine":22,"endColumn":32},"no-native-reassign",["36"],"no-negated-in-lhs",["37"],["36"],["37"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]